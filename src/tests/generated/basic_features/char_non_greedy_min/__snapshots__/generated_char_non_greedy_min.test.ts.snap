// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic_features/char_non_greedy_min template values are as expected 1`] = `
Object {
  "fiberHandlers": Array [
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "groupReference": Object {
              "astStart": 1,
              "idx": 0,
            },
          },
          "posLine1": "(a{3}?)(a)/",
          "posLine2": "^^^^^^^",
          "type": "groupEndMarker",
        },
        Object {
          "data": Object {
            "groupReference": Object {
              "astStart": 8,
              "idx": 1,
            },
          },
          "posLine1": "(a)/",
          "posLine2": "^^^",
          "type": "groupStartMarker",
        },
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 97,
                "type": "equal",
              },
              "type": "lastComparison",
            },
          },
          "posLine1": "a)/",
          "posLine2": "^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "groupReference": Object {
              "astStart": 8,
              "idx": 1,
            },
          },
          "posLine1": "(a)/",
          "posLine2": "^^^",
          "type": "groupEndMarker",
        },
      ],
      "followUp": null,
      "functionName": "fiber0001",
      "hasCallback": false,
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [
          Object {
            "astStart": 1,
            "idx": 0,
          },
          Object {
            "astStart": 8,
            "idx": 1,
          },
        ],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 97,
                "type": "equal",
              },
              "type": "lastComparison",
            },
          },
          "posLine1": "a{3}?)(a)/",
          "posLine2": "^",
          "type": "charOrSet",
        },
      ],
      "followUp": Object {
        "functionName": "callback",
      },
      "functionName": "fiber0002",
      "hasCallback": true,
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "groupReference": Object {
              "astStart": 1,
              "idx": 0,
            },
          },
          "posLine1": "(a{3}?)(a)/",
          "posLine2": "^^^^^^^",
          "type": "groupStartMarker",
        },
        Object {
          "data": Object {
            "followUp": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "groupReference": Object {
                      "astStart": 1,
                      "idx": 0,
                    },
                  },
                  "posLine1": "(a{3}?)(a)/",
                  "posLine2": "^^^^^^^",
                  "type": "groupEndMarker",
                },
                Object {
                  "data": Object {
                    "groupReference": Object {
                      "astStart": 8,
                      "idx": 1,
                    },
                  },
                  "posLine1": "(a)/",
                  "posLine2": "^^^",
                  "type": "groupStartMarker",
                },
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 97,
                        "type": "equal",
                      },
                      "type": "lastComparison",
                    },
                  },
                  "posLine1": "a)/",
                  "posLine2": "^",
                  "type": "charOrSet",
                },
                Object {
                  "data": Object {
                    "groupReference": Object {
                      "astStart": 8,
                      "idx": 1,
                    },
                  },
                  "posLine1": "(a)/",
                  "posLine2": "^^^",
                  "type": "groupEndMarker",
                },
              ],
              "followUp": null,
              "functionName": "fiber0001",
              "hasCallback": false,
              "lastAtomReturns": false,
              "meta": Object {
                "groups": Array [
                  Object {
                    "astStart": 1,
                    "idx": 0,
                  },
                  Object {
                    "astStart": 8,
                    "idx": 1,
                  },
                ],
              },
            },
            "maxCount": 3,
            "maxOrMinCount": true,
            "minCount": 3,
            "wrappedHandler": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 97,
                        "type": "equal",
                      },
                      "type": "lastComparison",
                    },
                  },
                  "posLine1": "a{3}?)(a)/",
                  "posLine2": "^",
                  "type": "charOrSet",
                },
              ],
              "followUp": Object {
                "functionName": "callback",
              },
              "functionName": "fiber0002",
              "hasCallback": true,
              "lastAtomReturns": false,
              "meta": Object {
                "groups": Array [],
              },
            },
          },
          "posLine1": "a{3}?)(a)/",
          "posLine2": "^^^^^",
          "type": "lazyQuantifier",
        },
      ],
      "followUp": null,
      "functionName": "fiber0003",
      "hasCallback": false,
      "lastAtomReturns": true,
      "meta": Object {
        "groups": Array [
          Object {
            "astStart": 1,
            "idx": 0,
          },
          Object {
            "astStart": 8,
            "idx": 1,
          },
        ],
      },
    },
  ],
  "groups": Array [
    Object {
      "astStart": 1,
      "idx": 0,
    },
    Object {
      "astStart": 8,
      "idx": 1,
    },
  ],
  "mainHandler": Object {
    "atoms": Array [
      Object {
        "data": Object {
          "groupReference": Object {
            "astStart": 1,
            "idx": 0,
          },
        },
        "posLine1": "(a{3}?)(a)/",
        "posLine2": "^^^^^^^",
        "type": "groupStartMarker",
      },
      Object {
        "data": Object {
          "followUp": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "groupReference": Object {
                    "astStart": 1,
                    "idx": 0,
                  },
                },
                "posLine1": "(a{3}?)(a)/",
                "posLine2": "^^^^^^^",
                "type": "groupEndMarker",
              },
              Object {
                "data": Object {
                  "groupReference": Object {
                    "astStart": 8,
                    "idx": 1,
                  },
                },
                "posLine1": "(a)/",
                "posLine2": "^^^",
                "type": "groupStartMarker",
              },
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 97,
                      "type": "equal",
                    },
                    "type": "lastComparison",
                  },
                },
                "posLine1": "a)/",
                "posLine2": "^",
                "type": "charOrSet",
              },
              Object {
                "data": Object {
                  "groupReference": Object {
                    "astStart": 8,
                    "idx": 1,
                  },
                },
                "posLine1": "(a)/",
                "posLine2": "^^^",
                "type": "groupEndMarker",
              },
            ],
            "followUp": null,
            "functionName": "fiber0001",
            "hasCallback": false,
            "lastAtomReturns": false,
            "meta": Object {
              "groups": Array [
                Object {
                  "astStart": 1,
                  "idx": 0,
                },
                Object {
                  "astStart": 8,
                  "idx": 1,
                },
              ],
            },
          },
          "maxCount": 3,
          "maxOrMinCount": true,
          "minCount": 3,
          "wrappedHandler": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 97,
                      "type": "equal",
                    },
                    "type": "lastComparison",
                  },
                },
                "posLine1": "a{3}?)(a)/",
                "posLine2": "^",
                "type": "charOrSet",
              },
            ],
            "followUp": Object {
              "functionName": "callback",
            },
            "functionName": "fiber0002",
            "hasCallback": true,
            "lastAtomReturns": false,
            "meta": Object {
              "groups": Array [],
            },
          },
        },
        "posLine1": "a{3}?)(a)/",
        "posLine2": "^^^^^",
        "type": "lazyQuantifier",
      },
    ],
    "followUp": null,
    "functionName": "fiber0003",
    "hasCallback": false,
    "lastAtomReturns": true,
    "meta": Object {
      "groups": Array [
        Object {
          "astStart": 1,
          "idx": 0,
        },
        Object {
          "astStart": 8,
          "idx": 1,
        },
      ],
    },
  },
  "regexStr": "/(a{3}?)(a)/",
}
`;
