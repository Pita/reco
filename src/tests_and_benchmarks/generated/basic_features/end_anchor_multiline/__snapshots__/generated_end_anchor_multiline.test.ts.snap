// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic_features/end_anchor_multiline template values are as expected 1`] = `
Object {
  "fiberHandlers": Array [
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 100,
                "type": "equal",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "/def$/m",
          "posLine2": " ^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 101,
                "type": "equal",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "/def$/m",
          "posLine2": "  ^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 102,
                "type": "equal",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "/def$/m",
          "posLine2": "   ^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {},
          "posLine1": "/def$/m",
          "posLine2": "    ^",
          "type": "multiLineEndAnchor",
        },
      ],
      "followUp": null,
      "functionName": "fiber0001",
      "lastAtomReturns": false,
      "meta": Object {
        "firstCharRange": Object {
          "chars": Array [
            100,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
  ],
  "greedyQuantifierHandlers": Array [],
  "groups": Array [],
  "lazyQuantifierHandlers": Array [],
  "mainHandler": Object {
    "atoms": Array [
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue": 100,
              "type": "equal",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "/def$/m",
        "posLine2": " ^",
        "type": "charOrSet",
      },
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue": 101,
              "type": "equal",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "/def$/m",
        "posLine2": "  ^",
        "type": "charOrSet",
      },
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue": 102,
              "type": "equal",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "/def$/m",
        "posLine2": "   ^",
        "type": "charOrSet",
      },
      Object {
        "data": Object {},
        "posLine1": "/def$/m",
        "posLine2": "    ^",
        "type": "multiLineEndAnchor",
      },
    ],
    "followUp": null,
    "functionName": "fiber0001",
    "lastAtomReturns": false,
    "meta": Object {
      "firstCharRange": Object {
        "chars": Array [
          100,
        ],
        "negate": false,
      },
      "groups": Array [],
    },
  },
  "quantifierCountersLength": 0,
  "regexStr": "/def$/m",
  "version": "0.2.2",
}
`;
