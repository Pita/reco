// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic_features/char_sets_quantifier template values are as expected 1`] = `
Object {
  "fiberHandlers": Array [
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "maxOrMinCount": false,
            "wrappedHandler": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 99,
                        "type": "lessOrEqual",
                      },
                      "comparisonTrue": Object {
                        "comparison": Object {
                          "comparisonValue": 97,
                          "type": "moreOrEqual",
                        },
                        "type": "lastComparison",
                      },
                      "type": "comparison",
                    },
                    "unicode": false,
                  },
                  "posLine1": "/[a-c]*[B-X]+[c]?/",
                  "posLine2": " ^^^^^",
                  "type": "charOrSet",
                },
              ],
              "followUp": null,
              "functionName": "fiber0004",
              "lastAtomReturns": false,
              "meta": Object {
                "firstCharRange": Object {
                  "chars": Array [
                    97,
                    98,
                    99,
                  ],
                  "negate": false,
                },
                "groups": Array [],
              },
            },
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": " ^^^^^^",
          "type": "nonBacktrackingQuantifier",
        },
        Object {
          "data": Object {
            "maxOrMinCount": true,
            "minCount": 1,
            "wrappedHandler": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 88,
                        "type": "lessOrEqual",
                      },
                      "comparisonTrue": Object {
                        "comparison": Object {
                          "comparisonValue": 66,
                          "type": "moreOrEqual",
                        },
                        "type": "lastComparison",
                      },
                      "type": "comparison",
                    },
                    "unicode": false,
                  },
                  "posLine1": "/[a-c]*[B-X]+[c]?/",
                  "posLine2": "       ^^^^^",
                  "type": "charOrSet",
                },
              ],
              "followUp": null,
              "functionName": "fiber0003",
              "lastAtomReturns": false,
              "meta": Object {
                "firstCharRange": Object {
                  "chars": Array [
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                  ],
                  "negate": false,
                },
                "groups": Array [],
              },
            },
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": "       ^^^^^^",
          "type": "nonBacktrackingQuantifier",
        },
        Object {
          "data": Object {
            "maxCount": 1,
            "maxOrMinCount": true,
            "wrappedHandler": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 99,
                        "type": "equal",
                      },
                      "type": "lastComparison",
                    },
                    "unicode": false,
                  },
                  "posLine1": "/[a-c]*[B-X]+[c]?/",
                  "posLine2": "             ^^^",
                  "type": "charOrSet",
                },
              ],
              "followUp": null,
              "functionName": "fiber0002",
              "lastAtomReturns": false,
              "meta": Object {
                "firstCharRange": Object {
                  "chars": Array [
                    99,
                  ],
                  "negate": false,
                },
                "groups": Array [],
              },
            },
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": "             ^^^^",
          "type": "nonBacktrackingQuantifier",
        },
      ],
      "followUp": null,
      "functionName": "fiber0001",
      "lastAtomReturns": false,
      "meta": Object {
        "firstCharRange": Object {
          "chars": Array [
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            97,
            98,
            99,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 99,
                "type": "equal",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": "             ^^^",
          "type": "charOrSet",
        },
      ],
      "followUp": null,
      "functionName": "fiber0002",
      "lastAtomReturns": false,
      "meta": Object {
        "firstCharRange": Object {
          "chars": Array [
            99,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 88,
                "type": "lessOrEqual",
              },
              "comparisonTrue": Object {
                "comparison": Object {
                  "comparisonValue": 66,
                  "type": "moreOrEqual",
                },
                "type": "lastComparison",
              },
              "type": "comparison",
            },
            "unicode": false,
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": "       ^^^^^",
          "type": "charOrSet",
        },
      ],
      "followUp": null,
      "functionName": "fiber0003",
      "lastAtomReturns": false,
      "meta": Object {
        "firstCharRange": Object {
          "chars": Array [
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 99,
                "type": "lessOrEqual",
              },
              "comparisonTrue": Object {
                "comparison": Object {
                  "comparisonValue": 97,
                  "type": "moreOrEqual",
                },
                "type": "lastComparison",
              },
              "type": "comparison",
            },
            "unicode": false,
          },
          "posLine1": "/[a-c]*[B-X]+[c]?/",
          "posLine2": " ^^^^^",
          "type": "charOrSet",
        },
      ],
      "followUp": null,
      "functionName": "fiber0004",
      "lastAtomReturns": false,
      "meta": Object {
        "firstCharRange": Object {
          "chars": Array [
            97,
            98,
            99,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
  ],
  "greedyQuantifierHandlers": Array [],
  "groups": Array [],
  "lazyQuantifierHandlers": Array [],
  "mainHandler": Object {
    "atoms": Array [
      Object {
        "data": Object {
          "maxOrMinCount": false,
          "wrappedHandler": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 99,
                      "type": "lessOrEqual",
                    },
                    "comparisonTrue": Object {
                      "comparison": Object {
                        "comparisonValue": 97,
                        "type": "moreOrEqual",
                      },
                      "type": "lastComparison",
                    },
                    "type": "comparison",
                  },
                  "unicode": false,
                },
                "posLine1": "/[a-c]*[B-X]+[c]?/",
                "posLine2": " ^^^^^",
                "type": "charOrSet",
              },
            ],
            "followUp": null,
            "functionName": "fiber0004",
            "lastAtomReturns": false,
            "meta": Object {
              "firstCharRange": Object {
                "chars": Array [
                  97,
                  98,
                  99,
                ],
                "negate": false,
              },
              "groups": Array [],
            },
          },
        },
        "posLine1": "/[a-c]*[B-X]+[c]?/",
        "posLine2": " ^^^^^^",
        "type": "nonBacktrackingQuantifier",
      },
      Object {
        "data": Object {
          "maxOrMinCount": true,
          "minCount": 1,
          "wrappedHandler": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 88,
                      "type": "lessOrEqual",
                    },
                    "comparisonTrue": Object {
                      "comparison": Object {
                        "comparisonValue": 66,
                        "type": "moreOrEqual",
                      },
                      "type": "lastComparison",
                    },
                    "type": "comparison",
                  },
                  "unicode": false,
                },
                "posLine1": "/[a-c]*[B-X]+[c]?/",
                "posLine2": "       ^^^^^",
                "type": "charOrSet",
              },
            ],
            "followUp": null,
            "functionName": "fiber0003",
            "lastAtomReturns": false,
            "meta": Object {
              "firstCharRange": Object {
                "chars": Array [
                  66,
                  67,
                  68,
                  69,
                  70,
                  71,
                  72,
                  73,
                  74,
                  75,
                  76,
                  77,
                  78,
                  79,
                  80,
                  81,
                  82,
                  83,
                  84,
                  85,
                  86,
                  87,
                  88,
                ],
                "negate": false,
              },
              "groups": Array [],
            },
          },
        },
        "posLine1": "/[a-c]*[B-X]+[c]?/",
        "posLine2": "       ^^^^^^",
        "type": "nonBacktrackingQuantifier",
      },
      Object {
        "data": Object {
          "maxCount": 1,
          "maxOrMinCount": true,
          "wrappedHandler": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 99,
                      "type": "equal",
                    },
                    "type": "lastComparison",
                  },
                  "unicode": false,
                },
                "posLine1": "/[a-c]*[B-X]+[c]?/",
                "posLine2": "             ^^^",
                "type": "charOrSet",
              },
            ],
            "followUp": null,
            "functionName": "fiber0002",
            "lastAtomReturns": false,
            "meta": Object {
              "firstCharRange": Object {
                "chars": Array [
                  99,
                ],
                "negate": false,
              },
              "groups": Array [],
            },
          },
        },
        "posLine1": "/[a-c]*[B-X]+[c]?/",
        "posLine2": "             ^^^^",
        "type": "nonBacktrackingQuantifier",
      },
    ],
    "followUp": null,
    "functionName": "fiber0001",
    "lastAtomReturns": false,
    "meta": Object {
      "firstCharRange": Object {
        "chars": Array [
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          97,
          98,
          99,
        ],
        "negate": false,
      },
      "groups": Array [],
    },
  },
  "quantifierCountersLength": 0,
  "regexStr": "/[a-c]*[B-X]+[c]?/",
  "version": "0.2.0",
}
`;
