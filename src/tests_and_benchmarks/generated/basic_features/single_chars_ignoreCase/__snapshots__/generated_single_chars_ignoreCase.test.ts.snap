// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic_features/single_chars_ignoreCase template values are as expected 1`] = `
Object {
  "fiberHandlers": Array [
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue1": 68,
                "comparisonValue2": 100,
                "type": "equalOneOfTwo",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "def/i",
          "posLine2": "^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue1": 69,
                "comparisonValue2": 101,
                "type": "equalOneOfTwo",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "ef/i",
          "posLine2": "^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue1": 70,
                "comparisonValue2": 102,
                "type": "equalOneOfTwo",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "f/i",
          "posLine2": "^",
          "type": "charOrSet",
        },
      ],
      "followUp": null,
      "functionName": "fiber0001",
      "lastAtomReturns": false,
      "meta": Object {
        "combinedCharRange": Object {
          "chars": Array [
            68,
            69,
            70,
            100,
            101,
            102,
          ],
          "negate": false,
        },
        "firstCharRange": Object {
          "chars": Array [
            68,
            100,
          ],
          "negate": false,
        },
        "groups": Array [],
      },
    },
  ],
  "mainHandler": Object {
    "atoms": Array [
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue1": 68,
              "comparisonValue2": 100,
              "type": "equalOneOfTwo",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "def/i",
        "posLine2": "^",
        "type": "charOrSet",
      },
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue1": 69,
              "comparisonValue2": 101,
              "type": "equalOneOfTwo",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "ef/i",
        "posLine2": "^",
        "type": "charOrSet",
      },
      Object {
        "data": Object {
          "negate": false,
          "tree": Object {
            "comparison": Object {
              "comparisonValue1": 70,
              "comparisonValue2": 102,
              "type": "equalOneOfTwo",
            },
            "type": "lastComparison",
          },
          "unicode": false,
        },
        "posLine1": "f/i",
        "posLine2": "^",
        "type": "charOrSet",
      },
    ],
    "followUp": null,
    "functionName": "fiber0001",
    "lastAtomReturns": false,
    "meta": Object {
      "combinedCharRange": Object {
        "chars": Array [
          68,
          69,
          70,
          100,
          101,
          102,
        ],
        "negate": false,
      },
      "firstCharRange": Object {
        "chars": Array [
          68,
          100,
        ],
        "negate": false,
      },
      "groups": Array [],
    },
  },
  "regexStr": "/def/i",
}
`;
