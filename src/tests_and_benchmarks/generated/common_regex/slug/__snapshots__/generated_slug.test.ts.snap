// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`common_regex/slug template values are as expected 1`] = `
Object {
  "fiberHandlers": Array [
    Object {
      "atoms": Array [
        Object {
          "data": Object {},
          "posLine1": "...+(?:-[a-z0-9]+)*$/",
          "posLine2": "                   ^",
          "type": "endAnchor",
        },
      ],
      "followUp": null,
      "functionName": "fiber0001",
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [],
      "followUp": Object {
        "followUp": Object {
          "atoms": Array [
            Object {
              "data": Object {},
              "posLine1": "...+(?:-[a-z0-9]+)*$/",
              "posLine2": "                   ^",
              "type": "endAnchor",
            },
          ],
          "followUp": null,
          "functionName": "fiber0001",
          "lastAtomReturns": false,
          "meta": Object {
            "groups": Array [],
          },
        },
        "functionName": "greedyQuantifier0003",
        "maxOrMinCount": false,
        "meta": Object {
          "groups": Array [],
        },
        "posLine1": "...+(?:-[a-z0-9]+)*$/",
        "posLine2": "    ^^^^^^^^^^^^^^^",
        "wrappedHandler": Object {
          "atoms": Array [
            Object {
              "data": Object {
                "negate": false,
                "tree": Object {
                  "comparison": Object {
                    "comparisonValue": 45,
                    "type": "equal",
                  },
                  "type": "lastComparison",
                },
                "unicode": false,
              },
              "posLine1": "...+(?:-[a-z0-9]+)...",
              "posLine2": "       ^",
              "type": "charOrSet",
            },
            Object {
              "data": Object {
                "functionName": "greedyQuantifier0005",
                "maxOrMinCount": true,
              },
              "posLine1": "...+(?:-[a-z0-9]+)*$/",
              "posLine2": "        ^^^^^^^^^",
              "type": "quantifierStarter",
            },
          ],
          "followUp": null,
          "functionName": "fiber0006",
          "lastAtomReturns": true,
          "meta": Object {
            "groups": Array [],
          },
        },
      },
      "functionName": "fiber0002",
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 57,
                "type": "lessOrEqual",
              },
              "comparisonFalse": Object {
                "comparison": Object {
                  "comparisonValue": 122,
                  "type": "lessOrEqual",
                },
                "comparisonTrue": Object {
                  "comparison": Object {
                    "comparisonValue": 97,
                    "type": "moreOrEqual",
                  },
                  "type": "lastComparison",
                },
                "type": "comparison",
              },
              "comparisonTrue": Object {
                "comparison": Object {
                  "comparisonValue": 48,
                  "type": "moreOrEqual",
                },
                "type": "lastComparison",
              },
              "type": "comparison",
            },
            "unicode": false,
          },
          "posLine1": "...+(?:-[a-z0-9]+)*$/",
          "posLine2": "        ^^^^^^^^",
          "type": "charOrSet",
        },
      ],
      "followUp": Object {
        "followUp": Object {
          "atoms": Array [],
          "followUp": Object {
            "followUp": Object {
              "atoms": Array [
                Object {
                  "data": Object {},
                  "posLine1": "...+(?:-[a-z0-9]+)*$/",
                  "posLine2": "                   ^",
                  "type": "endAnchor",
                },
              ],
              "followUp": null,
              "functionName": "fiber0001",
              "lastAtomReturns": false,
              "meta": Object {
                "groups": Array [],
              },
            },
            "functionName": "greedyQuantifier0003",
            "maxOrMinCount": false,
            "meta": Object {
              "groups": Array [],
            },
            "posLine1": "...+(?:-[a-z0-9]+)*$/",
            "posLine2": "    ^^^^^^^^^^^^^^^",
            "wrappedHandler": Object {
              "atoms": Array [
                Object {
                  "data": Object {
                    "negate": false,
                    "tree": Object {
                      "comparison": Object {
                        "comparisonValue": 45,
                        "type": "equal",
                      },
                      "type": "lastComparison",
                    },
                    "unicode": false,
                  },
                  "posLine1": "...+(?:-[a-z0-9]+)...",
                  "posLine2": "       ^",
                  "type": "charOrSet",
                },
                Object {
                  "data": Object {
                    "functionName": "greedyQuantifier0005",
                    "maxOrMinCount": true,
                  },
                  "posLine1": "...+(?:-[a-z0-9]+)*$/",
                  "posLine2": "        ^^^^^^^^^",
                  "type": "quantifierStarter",
                },
              ],
              "followUp": null,
              "functionName": "fiber0006",
              "lastAtomReturns": true,
              "meta": Object {
                "groups": Array [],
              },
            },
          },
          "functionName": "fiber0002",
          "lastAtomReturns": false,
          "meta": Object {
            "groups": Array [],
          },
        },
        "functionName": "greedyQuantifier0005",
        "maxOrMinCount": true,
        "meta": Object {
          "groups": Array [],
        },
        "minCount": 1,
        "posLine1": "...+(?:-[a-z0-9]+)*$/",
        "posLine2": "        ^^^^^^^^^",
        "wrappedHandler": "[Circular]",
      },
      "functionName": "fiber0004",
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 45,
                "type": "equal",
              },
              "type": "lastComparison",
            },
            "unicode": false,
          },
          "posLine1": "...+(?:-[a-z0-9]+)...",
          "posLine2": "       ^",
          "type": "charOrSet",
        },
        Object {
          "data": Object {
            "functionName": "greedyQuantifier0005",
            "maxOrMinCount": true,
          },
          "posLine1": "...+(?:-[a-z0-9]+)*$/",
          "posLine2": "        ^^^^^^^^^",
          "type": "quantifierStarter",
        },
      ],
      "followUp": null,
      "functionName": "fiber0006",
      "lastAtomReturns": true,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "functionName": "greedyQuantifier0003",
            "maxOrMinCount": false,
          },
          "posLine1": "...+(?:-[a-z0-9]+)*$/",
          "posLine2": "    ^^^^^^^^^^^^^^^",
          "type": "quantifierStarter",
        },
      ],
      "followUp": null,
      "functionName": "fiber0007",
      "lastAtomReturns": true,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {
            "negate": false,
            "tree": Object {
              "comparison": Object {
                "comparisonValue": 57,
                "type": "lessOrEqual",
              },
              "comparisonFalse": Object {
                "comparison": Object {
                  "comparisonValue": 122,
                  "type": "lessOrEqual",
                },
                "comparisonTrue": Object {
                  "comparison": Object {
                    "comparisonValue": 97,
                    "type": "moreOrEqual",
                  },
                  "type": "lastComparison",
                },
                "type": "comparison",
              },
              "comparisonTrue": Object {
                "comparison": Object {
                  "comparisonValue": 48,
                  "type": "moreOrEqual",
                },
                "type": "lastComparison",
              },
              "type": "comparison",
            },
            "unicode": false,
          },
          "posLine1": "[a-z0-9]+(?:-[a-z0...",
          "posLine2": "^^^^^^^^",
          "type": "charOrSet",
        },
      ],
      "followUp": Object {
        "followUp": Object {
          "atoms": Array [
            Object {
              "data": Object {
                "functionName": "greedyQuantifier0003",
                "maxOrMinCount": false,
              },
              "posLine1": "...+(?:-[a-z0-9]+)*$/",
              "posLine2": "    ^^^^^^^^^^^^^^^",
              "type": "quantifierStarter",
            },
          ],
          "followUp": null,
          "functionName": "fiber0007",
          "lastAtomReturns": true,
          "meta": Object {
            "groups": Array [],
          },
        },
        "functionName": "greedyQuantifier0009",
        "maxOrMinCount": true,
        "meta": Object {
          "groups": Array [],
        },
        "minCount": 1,
        "posLine1": "[a-z0-9]+(?:-[a-z0-...",
        "posLine2": "^^^^^^^^^",
        "wrappedHandler": "[Circular]",
      },
      "functionName": "fiber0008",
      "lastAtomReturns": false,
      "meta": Object {
        "groups": Array [],
      },
    },
    Object {
      "atoms": Array [
        Object {
          "data": Object {},
          "posLine1": "^[a-z0-9]+(...",
          "posLine2": "^",
          "type": "startAnchor",
        },
        Object {
          "data": Object {
            "functionName": "greedyQuantifier0009",
            "maxOrMinCount": true,
          },
          "posLine1": "[a-z0-9]+(?:-[a-z0-...",
          "posLine2": "^^^^^^^^^",
          "type": "quantifierStarter",
        },
      ],
      "followUp": null,
      "functionName": "fiber0010",
      "lastAtomReturns": true,
      "meta": Object {
        "groups": Array [],
      },
    },
  ],
  "greedyQuantifierHandlers": Array [
    Object {
      "followUp": Object {
        "atoms": Array [
          Object {
            "data": Object {},
            "posLine1": "...+(?:-[a-z0-9]+)*$/",
            "posLine2": "                   ^",
            "type": "endAnchor",
          },
        ],
        "followUp": null,
        "functionName": "fiber0001",
        "lastAtomReturns": false,
        "meta": Object {
          "groups": Array [],
        },
      },
      "functionName": "greedyQuantifier0003",
      "maxOrMinCount": false,
      "meta": Object {
        "groups": Array [],
      },
      "posLine1": "...+(?:-[a-z0-9]+)*$/",
      "posLine2": "    ^^^^^^^^^^^^^^^",
      "wrappedHandler": Object {
        "atoms": Array [
          Object {
            "data": Object {
              "negate": false,
              "tree": Object {
                "comparison": Object {
                  "comparisonValue": 45,
                  "type": "equal",
                },
                "type": "lastComparison",
              },
              "unicode": false,
            },
            "posLine1": "...+(?:-[a-z0-9]+)...",
            "posLine2": "       ^",
            "type": "charOrSet",
          },
          Object {
            "data": Object {
              "functionName": "greedyQuantifier0005",
              "maxOrMinCount": true,
            },
            "posLine1": "...+(?:-[a-z0-9]+)*$/",
            "posLine2": "        ^^^^^^^^^",
            "type": "quantifierStarter",
          },
        ],
        "followUp": null,
        "functionName": "fiber0006",
        "lastAtomReturns": true,
        "meta": Object {
          "groups": Array [],
        },
      },
    },
    Object {
      "followUp": Object {
        "atoms": Array [],
        "followUp": Object {
          "followUp": Object {
            "atoms": Array [
              Object {
                "data": Object {},
                "posLine1": "...+(?:-[a-z0-9]+)*$/",
                "posLine2": "                   ^",
                "type": "endAnchor",
              },
            ],
            "followUp": null,
            "functionName": "fiber0001",
            "lastAtomReturns": false,
            "meta": Object {
              "groups": Array [],
            },
          },
          "functionName": "greedyQuantifier0003",
          "maxOrMinCount": false,
          "meta": Object {
            "groups": Array [],
          },
          "posLine1": "...+(?:-[a-z0-9]+)*$/",
          "posLine2": "    ^^^^^^^^^^^^^^^",
          "wrappedHandler": Object {
            "atoms": Array [
              Object {
                "data": Object {
                  "negate": false,
                  "tree": Object {
                    "comparison": Object {
                      "comparisonValue": 45,
                      "type": "equal",
                    },
                    "type": "lastComparison",
                  },
                  "unicode": false,
                },
                "posLine1": "...+(?:-[a-z0-9]+)...",
                "posLine2": "       ^",
                "type": "charOrSet",
              },
              Object {
                "data": Object {
                  "functionName": "greedyQuantifier0005",
                  "maxOrMinCount": true,
                },
                "posLine1": "...+(?:-[a-z0-9]+)*$/",
                "posLine2": "        ^^^^^^^^^",
                "type": "quantifierStarter",
              },
            ],
            "followUp": null,
            "functionName": "fiber0006",
            "lastAtomReturns": true,
            "meta": Object {
              "groups": Array [],
            },
          },
        },
        "functionName": "fiber0002",
        "lastAtomReturns": false,
        "meta": Object {
          "groups": Array [],
        },
      },
      "functionName": "greedyQuantifier0005",
      "maxOrMinCount": true,
      "meta": Object {
        "groups": Array [],
      },
      "minCount": 1,
      "posLine1": "...+(?:-[a-z0-9]+)*$/",
      "posLine2": "        ^^^^^^^^^",
      "wrappedHandler": "[Circular]",
    },
    Object {
      "followUp": Object {
        "atoms": Array [
          Object {
            "data": Object {
              "functionName": "greedyQuantifier0003",
              "maxOrMinCount": false,
            },
            "posLine1": "...+(?:-[a-z0-9]+)*$/",
            "posLine2": "    ^^^^^^^^^^^^^^^",
            "type": "quantifierStarter",
          },
        ],
        "followUp": null,
        "functionName": "fiber0007",
        "lastAtomReturns": true,
        "meta": Object {
          "groups": Array [],
        },
      },
      "functionName": "greedyQuantifier0009",
      "maxOrMinCount": true,
      "meta": Object {
        "groups": Array [],
      },
      "minCount": 1,
      "posLine1": "[a-z0-9]+(?:-[a-z0-...",
      "posLine2": "^^^^^^^^^",
      "wrappedHandler": "[Circular]",
    },
  ],
  "mainHandler": Object {
    "atoms": Array [
      Object {
        "data": Object {},
        "posLine1": "^[a-z0-9]+(...",
        "posLine2": "^",
        "type": "startAnchor",
      },
      Object {
        "data": Object {
          "functionName": "greedyQuantifier0009",
          "maxOrMinCount": true,
        },
        "posLine1": "[a-z0-9]+(?:-[a-z0-...",
        "posLine2": "^^^^^^^^^",
        "type": "quantifierStarter",
      },
    ],
    "followUp": null,
    "functionName": "fiber0010",
    "lastAtomReturns": true,
    "meta": Object {
      "groups": Array [],
    },
  },
  "regexStr": "/^[a-z0-9]+(?:-[a-z0-9]+)*$/",
}
`;
